LeetCode Diagonal Traverse
https://leetcode.com/explore/learn/card/array-and-string/202/introduction-to-2d-array/1167/

class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        vector<int> result;
        int rows= mat.size();
        int cols= mat[0].size();
        int i=0;
        int j=0;
        int direction = -1; // 1 for downward & -1 for upward direction


        // loop on 2d array
        while((i!=rows-1) || (j!=cols-1))
        {
            cout<<"i ->" << i << endl;
            cout<<"j ->" << j << endl;
            cout<<"dir ->" << direction << endl;
            
            
            result.push_back(mat[i][j]);
            
            // check if direction is upward, move i to that direction
            if (direction==-1 && i>0 && j!=cols-1)
            {
                i+=direction;
                j-=direction;
            }
            // check if direction is upward and j<cols-1
            else if(direction == -1 && j<cols-1)
            {
                j-=direction;
                direction = -1* direction;
            }
            // if j==cols-1 then update i and reverse direction
            else if(direction == -1 && j==cols-1)
            {
                i-=direction;
                direction = -1* direction;
            }
            // check if direction is downward and j>0, move j to that direction
            else if (direction==1 && j>0 && i!=rows-1)
            {
                i+=direction;
                j-=direction;
            }
            //check if direction is downward and i<rows-1
            else if(direction == 1 && i<rows-1)
            {
                i+=direction;
                direction = -1* direction;
            }
            // if i==rows -1 then update j and reverse direction
            else if(direction == 1 && i==rows-1)
            {
                j+=direction;
                direction = -1* direction;
            }

            
        }
        result.push_back(mat[i][j]);
        
        
        return result;
    }
};